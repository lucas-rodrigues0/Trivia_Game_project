{"version":3,"sources":["services/fetchQuestionsAPI.js","redux/actions.js","components/Timer.jsx","components/Quests.jsx","components/TopInfobar.jsx","components/Game.jsx","services/listOfCategoriesAPI.js","components/Config.jsx","components/Login.jsx","components/Ranking.jsx","components/Feedback.jsx","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["configToString","configObj","category","difficulty","type","amount","amountString","categoryString","difficultyString","typeString","generateRandomAnswers","answerFromApi","allAnswersRandom","answers","j","x","i","length","parseInt","Math","random","shuffleAnswers","correct","incorrect","correctAnswer","answer","dataTest","incorrectAnswer","map","e","buildAnswers","correct_answer","incorrect_answers","processAnswers","objFromApi","processedResults","results","fetchQuestionsAPI","token","a","customQuery","tokenString","fetchUrl","fetch","questionsJson","json","questions","LOGIN","GET_TOKEN","SAVE","SAVE_QUESTIONS","UPDATE_SCORE","saveQuestions","obj","payload","fetchToken","dispatch","then","r","getToken","error","failedRequest","Timer","INTERVAL","this","myInterval","setInterval","props","timer","timeChange","stopTimer","handleClickAnswers","clearInterval","className","React","Component","Quests","state","questNumber","disableBtn","encodeUtf8","bind","handleClickNext","createNextBtn","saveScore","scoreRedux","localStorage","setItem","s","specialChars","accentChar","unescape","encodeURIComponent","replace","m","num","setState","diff","score","savedScore","getItem","Number","calc","setScore","JSON","parse","player","assertions","stringify","onClick","data-testid","question","disabled","to","defaultProps","connect","update","updateScore","TopInfobar","email","playerName","emailHash","MD5","toString","src","alt","login","Game","name","gravatarEmail","categoriesOBJ","Config","handleChange","handleSaveConfig","categories","categoriesAPI","result","id","trivia_categories","target","value","saveConfigAction","show","tempAmount","htmlFor","onChange","cat","index","min","max","saveConfig","Login","handleClick","toggleConfig","showConfig","verifyInputs","loginAction","fetchTokenAction","config","getQuestionsAction","res","old","history","push","renderLoginInputs","saveLoginInfo","getQuestions","Ranking","rankingList","sort","score1","score2","picture","Feedback","redirect","generateMessage","playAgain","gravatarUrl","ranking","App","path","component","Boolean","window","location","hostname","match","initialLoginState","initialConfigState","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cbeb473e.chunk.js","sourcesContent":["function configToString(configObj) {\n  const { category, difficulty, type, amount } = configObj;\n\n  const amountString = `amount=${amount}`;\n\n  let categoryString = '';\n  if (category !== '') categoryString = `&category=${category}`;\n\n  let difficultyString = '';\n  if (difficulty !== '') difficultyString = `&difficulty=${difficulty}`;\n\n  let typeString = '';\n  if (type !== '') typeString = `&type=${type}`;\n\n  return `${amountString}${categoryString}${difficultyString}${typeString}`;\n}\n\nfunction buildAnswers(correct, incorrect) {\n  const correctAnswer = [{ answer: correct, dataTest: 'correct-answer' }];\n  const incorrectAnswer = incorrect\n    .map((e, i) => ({ answer: e, dataTest: `wrong-answer-${i}` }));\n  const answers = [...correctAnswer, ...incorrectAnswer];\n  return answers;\n}\n\nfunction shuffleAnswers(answers) {\n  // função adaptada de \"https://stackoverflow.com/users/464744/blender\"\n  for (let j, x, i = answers.length;\n    i;\n    j = parseInt(Math.random() * i, 10),\n    x = answers[i -= 1],\n    answers[i] = answers[j],\n    answers[j] = x);\n  return answers;\n}\n\nfunction generateRandomAnswers(answerFromApi) {\n  const { correct_answer: ca, incorrect_answers: ia } = answerFromApi;\n  const allAnswers = buildAnswers(ca, ia);\n  const allAnswersRandom = shuffleAnswers(allAnswers);\n  return {\n    ...answerFromApi,\n    allAnswersRandom,\n  };\n}\n\nfunction processAnswers(objFromApi) {\n  const { results } = objFromApi;\n  const processedResults = results.map(generateRandomAnswers);\n  return { ...objFromApi, results: processedResults };\n}\n\nexport default async function fetchQuestionsAPI(configObj, token) {\n  const customQuery = configToString(configObj);\n  const tokenString = `&token=${token}`;\n  const fetchUrl = `https://opentdb.com/api.php?${customQuery}${tokenString}`;\n  const questionsJson = await fetch(fetchUrl);\n  const questions = await questionsJson.json();\n  return processAnswers(questions);\n}\n","import fetchQuestionsAPI from '../services/fetchQuestionsAPI';\n\nexport const LOGIN = 'LOGIN';\nexport const GET_TOKEN = 'GET_TOKEN';\nexport const FAILED_REQUEST = 'FAILED_REQUEST';\nexport const SAVE = 'SAVE';\nexport const SAVE_QUESTIONS = 'SAVE_QUESTIONS';\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\n\nexport const saveLoginInfo = ({ email, playerName }) => ({\n  type: LOGIN,\n  payload: { email, playerName },\n});\n\nexport const updateScore = (score) => ({\n  type: UPDATE_SCORE,\n  payload: Number(score),\n});\n\nfunction getToken(json) {\n  return {\n    type: GET_TOKEN,\n    payload: json.token,\n  };\n}\n\nfunction failedRequest(error) {\n  return { type: FAILED_REQUEST, payload: error };\n}\n\nexport function saveConfig(obj) {\n  return { type: SAVE, payload: obj };\n}\n\nexport function saveQuestions(obj) {\n  return { type: SAVE_QUESTIONS, payload: obj };\n}\n\nexport function getQuestions(obj, token) {\n  return async (dispatch) => {\n    const questions = await fetchQuestionsAPI(obj, token);\n    return dispatch(saveQuestions(questions));\n  };\n}\n\nexport function fetchToken() {\n  return (dispatch) => fetch('https://opentdb.com/api_token.php?command=request')\n    .then((r) => r.json()\n      .then(\n        (json) => dispatch(getToken(json)),\n        (error) => dispatch(failedRequest(error)),\n      ));\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Timer extends React.Component {\n  componentDidMount() {\n    let INTERVAL = '1000';\n    this.myInterval = setInterval(() => {\n      const { timer, timeChange, stopTimer, handleClickAnswers } = this.props;\n      if (timer === 0 || stopTimer) {\n        INTERVAL = '0';\n        handleClickAnswers();\n      } else {\n        timeChange();\n      }\n    }, parseInt(INTERVAL, 10));\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.myInterval);\n  }\n\n  render() {\n    const { timer } = this.props;\n\n    return (\n      <section className=\"timerDiv\">\n        <p>{ `Tempo: ${timer}`}</p>\n      </section>\n    );\n  }\n}\n\nTimer.propTypes = {\n  timer: PropTypes.number.isRequired,\n  timeChange: PropTypes.func.isRequired,\n  stopTimer: PropTypes.bool.isRequired,\n  handleClickAnswers: PropTypes.func.isRequired,\n};\n\nexport default Timer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { updateScore } from '../redux/actions';\nimport './css/Quests.css';\nimport Timer from './Timer';\n\nclass Quests extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      questNumber: 0,\n      disableBtn: false,\n      timer: 30,\n      stopTimer: false,\n    };\n\n    this.encodeUtf8 = this.encodeUtf8.bind(this);\n    this.handleClickNext = this.handleClickNext.bind(this);\n    this.handleClickAnswers = this.handleClickAnswers.bind(this);\n    this.timeChange = this.timeChange.bind(this);\n    this.createNextBtn = this.createNextBtn.bind(this);\n    this.saveScore = this.saveScore.bind(this);\n  }\n\n  componentDidMount() {\n    const { scoreRedux } = this.props;\n    localStorage.setItem('score', '0');\n    scoreRedux('0');\n  }\n\n  encodeUtf8(s) {\n    // adapatda da resposta a https://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript\n    const specialChars = {\n      '&quot;': '\"',\n      '&#039;': '\\'',\n      '&amp;': '&',\n      '&trade;': '™',\n      '&Omicron;': 'ο',\n      '&Sigma;': 'σ',\n      '&Pi;': 'π',\n      '&Nu;': 'ν',\n    };\n    const accentChar = {\n      '&aacute;': 'á',\n      '&auml;': 'ä',\n      '&aring;': 'å',\n      '&eacute;': 'é',\n      '&iacute;': 'í',\n      '&Uuml;': 'ü',\n      '&ouml;': 'ö',\n    };\n    const decodeSpecialRegex = /&(quot|#039|amp|trade|Omicron|Sigma|Pi|Nu);/gi;\n    const decodeAccentRegex = /&(aacute|auml|aring|eacute|iacute|Uuml|ouml);/gi;\n    const stringUTF = unescape(encodeURIComponent(s));\n    return stringUTF.replace(decodeSpecialRegex, (m) => specialChars[m])\n      .replace(decodeAccentRegex, (m) => accentChar[m]);\n  }\n\n  handleClickNext() {\n    const { questions } = this.props;\n    const { questNumber } = this.state;\n    let num;\n    if (questNumber < questions.length) {\n      num = questNumber + 1;\n    } else { num = 0; }\n    this.setState(() => ({\n      questNumber: num,\n      disableBtn: false,\n      timer: 30,\n      stopTimer: false,\n    }));\n  }\n\n  saveScore(timer, diff, score) {\n    const { scoreRedux } = this.props;\n    const SUM_TEN = 10;\n    let savedScore = localStorage.getItem('score');\n    if (savedScore === null) savedScore = Number(score);\n\n    const POINTS_HARD = 3;\n    const POINTS_MEDIUM = 2;\n\n    if (diff === 'hard') {\n      const calc = SUM_TEN + (timer * POINTS_HARD);\n      localStorage.setItem('score', calc + Number(savedScore));\n    } else if (diff === 'medium') {\n      const calc = SUM_TEN + (timer * POINTS_MEDIUM);\n      localStorage.setItem('score', calc + Number(savedScore));\n    } else {\n      const calc = SUM_TEN + timer;\n      localStorage.setItem('score', calc + Number(savedScore));\n    }\n    const setScore = localStorage.getItem('score');\n    scoreRedux(setScore);\n    const state = JSON.parse(localStorage.getItem('state'));\n    state.player.assertions += 1;\n    state.player.score = Number(setScore);\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  handleClickAnswers(answer, diff) {\n    const { timer } = this.state;\n    this.setState({\n      disableBtn: true,\n      stopTimer: true,\n    });\n    if (answer === 'correct-answer') this.saveScore(timer, diff);\n  }\n\n  timeChange() {\n    const { timer } = this.state;\n    this.setState({ timer: timer - 1 });\n  }\n\n  createNextBtn() {\n    const { disableBtn } = this.state;\n    if (disableBtn) {\n      return (\n        <button\n          className=\"cool\"\n          type=\"button\"\n          onClick={ () => this.handleClickNext() }\n          data-testid=\"btn-next\"\n        >\n          PRÓXIMA\n        </button>\n      );\n    }\n  }\n\n  render() {\n    const { questions, score } = this.props;\n    const { questNumber, disableBtn, timer, stopTimer } = this.state;\n    if (questions.length > 0 && questions.length > questNumber) {\n      const random = questions[questNumber].allAnswersRandom;\n      const diff = questions[questNumber].difficulty;\n      return (\n        <div>\n          <h2 data-testid=\"question-category\">\n            Categoria:\n            { questions[questNumber].category }\n          </h2>\n          <h2 data-testid=\"question-text\">\n            { this.encodeUtf8(questions[questNumber].question) }\n          </h2>\n          <section className=\"answersDiv\">\n            {random.map((e, i) => (\n              <button\n                key={ i }\n                type=\"button\"\n                data-testid={ e.dataTest }\n                disabled={ disableBtn }\n                onClick={ () => this.handleClickAnswers(e.dataTest, diff, score) }\n                className={ e.dataTest.replace(/-[0-9]/i, '') }\n              >\n                { this.encodeUtf8(e.answer) }\n              </button>\n\n            )) }\n          </section>\n          <Timer\n            timer={ timer }\n            timeChange={ this.timeChange }\n            stopTimer={ stopTimer }\n            handleClickAnswers={ this.handleClickAnswers }\n          />\n          { this.createNextBtn() }\n        </div>\n      );\n    }\n    if (questNumber > 0 && questNumber === questions.length) {\n      return (<Redirect to=\"/feedback\" />);\n    }\n    return (<span>Loading</span>);\n  }\n}\n\nQuests.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object),\n  score: PropTypes.number.isRequired,\n  scoreRedux: PropTypes.func.isRequired,\n};\n\nQuests.defaultProps = {\n  questions: [],\n};\n\nconst mapStateToProps = (state) => ({\n  questions: state.questions.results,\n  score: state.update.score,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  scoreRedux: (score) => dispatch(updateScore(score)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quests);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { MD5 } from 'crypto-js';\n\nclass TopInfobar extends React.Component {\n  render() {\n    const { email, playerName, score } = this.props;\n    const emailHash = MD5(email).toString();\n    return (\n      <section className=\"game-header\">\n        <div className=\"userInfoDiv\">\n          <img\n            data-testid=\"header-profile-picture\"\n            src={ `https://www.gravatar.com/avatar/${emailHash}` }\n            alt=\"player-img\"\n          />\n          Jogador:\n          <span data-testid=\"header-player-name\">{ playerName }</span>\n        </div>\n        <div className=\"scoreDiv\">\n          Pontos:\n          <span data-testid=\"header-score\">{score}</span>\n        </div>\n      </section>\n    );\n  }\n}\nTopInfobar.propTypes = {\n  email: PropTypes.string.isRequired,\n  playerName: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.login.email,\n  playerName: state.login.playerName,\n  score: state.update.score,\n});\n// const mapDispatchToProps = dispatch => ({});\n\nexport default connect(mapStateToProps, null)(TopInfobar);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Quests from './Quests';\nimport './css/Game.css';\nimport TopInfobar from './TopInfobar';\n\nclass Game extends React.Component {\n  componentDidMount() {\n    const { email, playerName, score } = this.props;\n    const state = {\n      player: {\n        name: playerName,\n        assertions: 0,\n        score,\n        gravatarEmail: email,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  render() {\n    return (\n      <>\n        <TopInfobar />\n        <section className=\"game-question\">\n          <Quests />\n        </section>\n      </>\n    );\n  }\n}\n\nGame.propTypes = {\n  email: PropTypes.string.isRequired,\n  playerName: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.login.email,\n  playerName: state.login.playerName,\n  score: state.update.score,\n});\n// const mapDispatchToProps = (dispatch) => ({});\n\nexport default connect(mapStateToProps, null)(Game);\n","export default async function categoriesAPI() {\n  const categoriesOBJ = await fetch('https://opentdb.com/api_category.php');\n  return categoriesOBJ.json();\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport categoriesAPI from '../services/listOfCategoriesAPI';\nimport { saveConfig } from '../redux/actions';\n\nclass Config extends React.Component {\n  constructor() {\n    super();\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSaveConfig = this.handleSaveConfig.bind(this);\n    this.state = {\n      categories: [],\n      category: '',\n      difficulty: '',\n      type: '',\n      amount: 5,\n    };\n  }\n\n  componentDidMount() {\n    categoriesAPI().then((result) => {\n      const categories = [{ id: 0, name: 'Any Category' },\n        ...result.trivia_categories];\n      this.setState(() => ({\n        categories,\n      }));\n    });\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState(() => ({\n      [name]: value,\n    }));\n  }\n\n  handleSaveConfig() {\n    const { saveConfigAction, show } = this.props;\n    const { category, difficulty, type, amount } = this.state;\n    const MIN_QUESTIONS = 5;\n    const MAX_QUESTIONS = 50;\n    let tempAmount = amount;\n    if (tempAmount === '' || +tempAmount <= MIN_QUESTIONS) tempAmount = MIN_QUESTIONS;\n    if (+tempAmount >= MAX_QUESTIONS) tempAmount = MAX_QUESTIONS;\n    saveConfigAction({ category, difficulty, type, amount: tempAmount });\n    show();\n  }\n\n  render() {\n    const { categories, category, difficulty, type, amount } = this.state;\n    return (\n      <>\n        <h1 data-testid=\"settings-title\">Configurações</h1>\n        <label htmlFor=\"category\">\n          Categoria\n          <select\n            name=\"category\"\n            id=\"category\"\n            onChange={ this.handleChange }\n            value={ category }\n          >\n            { categories.map((cat, index) => (\n              <option value={ cat.id } key={ index }>\n                { cat.name }\n              </option>\n            ))}\n          </select>\n        </label>\n\n        <label htmlFor=\"difficulty\">\n          Dificuldade\n          <select\n            name=\"difficulty\"\n            id=\"difficulty\"\n            onChange={ this.handleChange }\n            value={ difficulty }\n          >\n            <option value=\"any\">Any Difficulty</option>\n            <option value=\"easy\">Easy</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"hard\">Hard</option>\n          </select>\n        </label>\n\n        <label htmlFor=\"type\">\n          Tipo\n          <select\n            name=\"type\"\n            id=\"type\"\n            onChange={ this.handleChange }\n            value={ type }\n          >\n            <option value=\"\">Any Type</option>\n            <option value=\"multiple\">Multiple Choice</option>\n            <option value=\"boolean\">True / False</option>\n          </select>\n        </label>\n\n        <label htmlFor=\"amount\">\n          Quantidade de Perguntas\n          <input\n            type=\"number\"\n            min=\"5\"\n            max=\"50\"\n            name=\"amount\"\n            id=\"amount\"\n            value={ amount }\n            onChange={ this.handleChange }\n          />\n        </label>\n\n        <button\n          type=\"button\"\n          onClick={ this.handleSaveConfig }\n          className=\"cool saveConfig\"\n        >\n          SALVAR\n        </button>\n      </>\n    );\n  }\n}\n\nConfig.propTypes = {\n  saveConfigAction: PropTypes.func.isRequired,\n  show: PropTypes.func.isRequired,\n};\n\n// const mapStateToProps = (state) => ({});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveConfigAction: (obj) => dispatch(saveConfig(obj)),\n});\n\nexport default connect(null, mapDispatchToProps)(Config);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Config from './Config';\nimport { fetchToken, getQuestions, saveLoginInfo } from '../redux/actions';\nimport './css/Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.toggleConfig = this.toggleConfig.bind(this);\n    this.state = {\n      email: '',\n      playerName: '',\n      disableBtn: true,\n      showConfig: false,\n    };\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState(() => ({ [name]: value }), () => {\n      this.verifyInputs();\n    });\n  }\n\n  verifyInputs() {\n    const { email, playerName } = this.state;\n    if (email !== '' && playerName !== '') {\n      this.setState(() => ({ disableBtn: false }));\n    } else {\n      this.setState(() => ({ disableBtn: true }));\n    }\n  }\n\n  handleClick() {\n    const { loginAction, fetchTokenAction, config, getQuestionsAction } = this.props;\n    const { email, playerName } = this.state;\n    loginAction({ email, playerName });\n    fetchTokenAction().then(\n      (res) => {\n        localStorage.setItem('token', res.payload);\n        getQuestionsAction(config, res.payload);\n      },\n    );\n  }\n\n  toggleConfig() {\n    this.setState((old) => ({\n      showConfig: !old.showConfig,\n    }));\n  }\n\n  renderLoginInputs() {\n    const { history } = this.props;\n    const { email, playerName, disableBtn } = this.state;\n    return (\n      <>\n        <label htmlFor=\"email\">\n          Email do Gravatar:\n          <input\n            type=\"text\"\n            id=\"email\"\n            value={ email }\n            name=\"email\"\n            onChange={ this.handleChange }\n            data-testid=\"input-gravatar-email\"\n          />\n        </label>\n        <label htmlFor=\"playerName\">\n          Nome do Jogador:\n          <input\n            type=\"text\"\n            id=\"playerName\"\n            name=\"playerName\"\n            value={ playerName }\n            onChange={ this.handleChange }\n            data-testid=\"input-player-name\"\n          />\n        </label>\n        <button\n          className=\"loginButtons cool\"\n          disabled={ disableBtn }\n          type=\"button\"\n          onClick={ async () => {\n            await this.handleClick();\n            history.push('/game');\n          } }\n          data-testid=\"btn-play\"\n        >\n          JOGAR!\n        </button>\n        <button\n          className=\"loginButtons cool\"\n          type=\"button\"\n          onClick={ this.toggleConfig }\n          data-testid=\"btn-settings\"\n        >\n          CONFIG\n        </button>\n      </>\n    );\n  }\n\n  render() {\n    const { showConfig } = this.state;\n    return (\n      <section className=\"loginSection\">\n        { showConfig ? <Config show={ this.toggleConfig } />\n          : this.renderLoginInputs() }\n\n      </section>\n    );\n  }\n}\nLogin.propTypes = {\n  loginAction: PropTypes.func.isRequired,\n  fetchTokenAction: PropTypes.func.isRequired,\n  getQuestionsAction: PropTypes.func.isRequired,\n  config: PropTypes.objectOf(PropTypes.any).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  config: state.config,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  loginAction: (obj) => dispatch(saveLoginInfo(obj)),\n  fetchTokenAction: () => dispatch(fetchToken()),\n  getQuestionsAction: (obj, token) => dispatch(getQuestions(obj, token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './css/Ranking.css';\n\nclass Ranking extends React.Component {\n  render() {\n    const { history: { push } } = this.props;\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    const rankingList = ranking.sort((score1, score2) => (\n      Number(score2.score) - Number(score1.score)\n    ));\n    return (\n      <section className=\"rankingDiv\">\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        { rankingList.map((player, index) => (\n          <div key={ index } className=\"rankListDiv\">\n            <p>{index + 1}</p>\n            <div className=\"playerInfoDiv\">\n              <img src={ player.picture } alt=\"player-img\" />\n              <p data-testid={ `player-name-${index}` }>{player.name}</p>\n              <p data-testid={ `player-score-${index}` }>{player.score}</p>\n            </div>\n          </div>\n        ))}\n        <button\n          data-testid=\"btn-go-home\"\n          onClick={ () => push('/') }\n          type=\"button\"\n          className=\"cool\"\n        >\n          Home\n        </button>\n      </section>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default Ranking;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { MD5 } from 'crypto-js';\nimport TopInfobar from './TopInfobar';\nimport './css/Feedback.css';\n\nclass Feedback extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      redirect: false,\n    };\n\n    this.generateMessage = this.generateMessage.bind(this);\n    this.playAgain = this.playAgain.bind(this);\n  }\n\n  componentDidMount() {\n    const { email, playerName, score } = this.props;\n    const emailHash = MD5(email).toString();\n    const gravatarUrl = `https://www.gravatar.com/avatar/${emailHash}`;\n    let ranking = JSON.parse(localStorage.getItem('ranking'));\n    if (!ranking) ranking = [];\n    ranking.push({\n      name: playerName,\n      score,\n      picture: gravatarUrl,\n    });\n    localStorage.setItem('ranking', JSON.stringify(ranking));\n  }\n\n  playAgain() {\n    this.setState({ redirect: true });\n  }\n\n  generateMessage(assertions) {\n    const ASSERT_NUM = 3;\n    if (assertions < ASSERT_NUM) {\n      return 'Podia ser melhor...';\n    }\n    return 'Mandou bem!';\n  }\n\n  render() {\n    const { score } = this.props;\n    const { history: { push } } = this.props;\n    const { assertions } = JSON.parse(localStorage.getItem('state')).player;\n    const { redirect } = this.state;\n    if (redirect) return (<Redirect to=\"/\" />);\n    return (\n      <>\n        <TopInfobar />\n        <section className=\"feedbackDiv\">\n          <h4>\n            Total de acertos:\n            {' '}\n            <span data-testid=\"feedback-total-question\">{assertions}</span>\n          </h4>\n          <h4>\n            Total de Pontos:\n            {' '}\n            <span data-testid=\"feedback-total-score\">{score}</span>\n          </h4>\n          <div data-testid=\"feedback-text\">{ this.generateMessage(assertions) }</div>\n\n          <button\n            onClick={ this.playAgain }\n            className=\"cool\"\n            data-testid=\"btn-play-again\"\n            type=\"button\"\n          >\n            Jogar novamente\n          </button>\n          <button\n            type=\"button\"\n            onClick={ () => push('/ranking') }\n            data-testid=\"btn-ranking\"\n            className=\"cool\"\n          >\n            Ranking\n          </button>\n        </section>\n      </>\n    );\n  }\n}\nFeedback.propTypes = {\n  email: PropTypes.string.isRequired,\n  playerName: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.login.email,\n  playerName: state.login.playerName,\n  score: state.update.score,\n});\n// const mapDispatchToProps = (dispatch) => ({});\n\nexport default connect(mapStateToProps, null)(Feedback);\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport Game from './components/Game';\nimport Login from './components/Login';\nimport Ranking from './components/Ranking';\nimport Feedback from './components/Feedback';\nimport './App.css';\n\nclass App extends React.Component {\n  componentDidMount() {\n    localStorage.setItem('ranking', JSON.stringify([]));\n  }\n\n  render() {\n    return (\n      <main>\n        <Switch>\n          <Route path=\"/ranking\" component={ Ranking } />\n          <Route path=\"/game\" component={ Game } />\n          <Route path=\"/feedback\" component={ Feedback } />\n          <Route path=\"/\" component={ Login } />\n        </Switch>\n      </main>\n    );\n  }\n}\nApp.propTypes = {};\n// const mapStateToProps = (state) => ({});\n// const mapDispatchToProps = (dispatch) => ({});\n\nexport default connect(null, null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LOGIN, GET_TOKEN, SAVE, SAVE_QUESTIONS, UPDATE_SCORE } from './actions';\n\nconst initialLoginState = { email: '',\n  playerName: '' };\n\nexport function loginReducer(state = initialLoginState, { type, payload }) {\n  switch (type) {\n  case LOGIN:\n    return { ...state, ...payload };\n  case GET_TOKEN:\n    return { ...state, token: payload };\n  default:\n    return state;\n  }\n}\n\nexport function updateReducer(state = { score: 0 }, { type, payload }) {\n  switch (type) {\n  case UPDATE_SCORE:\n    return { ...state, score: payload };\n  default:\n    return state;\n  }\n}\n\nconst initialConfigState = {\n  category: '',\n  difficulty: '',\n  type: '',\n  amount: 5,\n};\n\nexport function configReducer(state = initialConfigState, { type, payload }) {\n  switch (type) {\n  case SAVE:\n    return { ...state, ...payload };\n  default:\n    return state;\n  }\n}\n\nexport function questionsReducer(state = {}, { type, payload }) {\n  switch (type) {\n  case SAVE_QUESTIONS:\n    return { ...state, ...payload };\n  default:\n    return state;\n  }\n}\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { loginReducer as login,\n  configReducer as config,\n  questionsReducer as questions,\n  updateReducer as update,\n} from './reducers';\n\nconst rootReducer = combineReducers({\n  login,\n  config,\n  questions,\n  update,\n});\n\nconst store = createStore(rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}